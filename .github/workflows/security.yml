name: Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 6 * * 1"

env:
  GO_VERSION: "1.24.4"

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-security-${{ runner.os }}-${{ env.GO_VERSION }}-${{ hashFiles('go.work', '**/go.mod') }}
          restore-keys: |
            go-security-${{ runner.os }}-${{ env.GO_VERSION }}-
            go-security-${{ runner.os }}-

      - name: Setup workspace
        run: |
          echo "Setting up Go workspace..."

          if [ ! -f go.work ]; then
            echo "Creating Go workspace..."
            mkdir -p cli orchestrator processor shared

            for component in cli orchestrator processor shared; do
              if [ ! -f "$component/go.mod" ]; then
                echo "Creating go.mod for $component..."
                cd "$component"
                echo "module github.com/HatiCode/nestor/$component" > go.mod
                echo "" >> go.mod
                echo "go ${{ env.GO_VERSION }}" >> go.mod
                cd ..
              fi
            done

            echo "go 1.24.4" > go.work
            echo "" >> go.work
            echo "use (" >> go.work
            echo "	./cli" >> go.work
            echo "	./orchestrator" >> go.work
            echo "	./processor" >> go.work
            echo "	./shared" >> go.work
            echo ")" >> go.work

            echo "Created go.work file:"
            cat go.work
          fi

          echo "Syncing workspace..."
          go work sync

          echo "Downloading dependencies..."
          go mod download

      - name: Run Gosec Security Scanner
        run: |
          echo "🔒 Running Gosec security scanner..."

          # Install gosec using the correct import path
          go install github.com/securego/gosec/v2/cmd/gosec@latest

          # Verify gosec is available
          if command -v gosec >/dev/null 2>&1; then
            echo "✅ Gosec installed successfully"
            gosec -fmt=json -out=gosec-results.json ./... || echo "Gosec found security issues"
            gosec -fmt=text ./... > gosec-report.txt || echo "Gosec report generated"
            echo "✅ Gosec scan completed"
          else
            echo "❌ Failed to install gosec"
            echo "# Gosec scan skipped due to installation failure" > gosec-report.txt
            echo '{"Stats":{"found":0},"Issues":[]}' > gosec-results.json
          fi

      - name: Run Trivy Vulnerability Scanner
        run: |
          echo "🔍 Running Trivy vulnerability scanner..."

          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

          trivy fs --format json --output trivy-results.json . || echo "Trivy found vulnerabilities"
          trivy fs --format table . > trivy-report.txt || echo "Trivy report generated"

          echo "✅ Trivy scan completed"

      - name: Check Go Dependencies for Known Vulnerabilities
        run: |
          echo "📦 Checking Go dependencies..."

          go install golang.org/x/vuln/cmd/govulncheck@latest

          for component in cli orchestrator processor shared; do
            if [ -f "$component/go.mod" ]; then
              echo "Scanning $component..."
              cd "$component"
              govulncheck ./... > "../govulncheck-$component.txt" 2>&1 || echo "Vulnerabilities found in $component"
              cd ..
            fi
          done

          echo "✅ Dependency vulnerability check completed"

      - name: Analyze Security Results
        run: |
          echo "📊 Analyzing security scan results..."

          gosec_issues=0
          trivy_issues=0
          vuln_issues=0

          if [ -f gosec-results.json ]; then
            gosec_issues=$(jq '.Stats.found // 0' gosec-results.json 2>/dev/null || echo "0")
          fi

          if [ -f trivy-results.json ]; then
            trivy_issues=$(jq '[.Results[]?.Vulnerabilities[]?] | length' trivy-results.json 2>/dev/null || echo "0")
          fi

          if ls govulncheck-*.txt 1> /dev/null 2>&1; then
            vuln_issues=$(grep -c "Vulnerability" govulncheck-*.txt || echo "0")
          fi

          echo "# 🛡️ Security Scan Results" > security-summary.md
          echo "" >> security-summary.md
          echo "## 📊 Summary" >> security-summary.md
          echo "- **Gosec Issues**: $gosec_issues" >> security-summary.md
          echo "- **Trivy Vulnerabilities**: $trivy_issues" >> security-summary.md
          echo "- **Go Vulnerabilities**: $vuln_issues" >> security-summary.md
          echo "" >> security-summary.md
          echo "## 🔍 Scan Details" >> security-summary.md
          echo "" >> security-summary.md
          echo "### Gosec (Source Code Security)" >> security-summary.md
          if [ "$gosec_issues" -gt 0 ]; then
            echo "⚠️ Found $gosec_issues security issues in source code" >> security-summary.md
          else
            echo "✅ No security issues found in source code" >> security-summary.md
          fi
          echo "" >> security-summary.md
          echo "### Trivy (Dependency Vulnerabilities)" >> security-summary.md
          if [ "$trivy_issues" -gt 0 ]; then
            echo "⚠️ Found $trivy_issues vulnerabilities in dependencies" >> security-summary.md
          else
            echo "✅ No vulnerabilities found in dependencies" >> security-summary.md
          fi
          echo "" >> security-summary.md
          echo "### Govulncheck (Go-specific Vulnerabilities)" >> security-summary.md
          if [ "$vuln_issues" -gt 0 ]; then
            echo "⚠️ Found $vuln_issues Go-specific vulnerabilities" >> security-summary.md
          else
            echo "✅ No Go-specific vulnerabilities found" >> security-summary.md
          fi
          echo "" >> security-summary.md
          echo "## 📋 Next Steps" >> security-summary.md
          echo "1. Review detailed reports in the artifacts" >> security-summary.md
          echo "2. Address any critical or high-severity issues" >> security-summary.md
          echo "3. Run \`make security\` locally for more details" >> security-summary.md
          echo "4. Update dependencies with \`make deps-upgrade\`" >> security-summary.md

          cat security-summary.md
          cat security-summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            gosec-results.json
            gosec-report.txt
            trivy-results.json
            trivy-report.txt
            govulncheck-*.txt
            security-summary.md
          retention-days: 30

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const summary = fs.readFileSync('security-summary.md', 'utf8');

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🔒 Security Scan Results\n\n${summary}\n\n📁 **Detailed reports available in the [workflow artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})**`
              });
            } catch (error) {
              console.log('Could not post comment:', error.message);
            }
        continue-on-error: true

  dependency-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for dependency changes
        run: |
          echo "🔍 Checking for dependency changes in PR..."

          if git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.sha }} | grep -E "(go\.mod|go\.sum)"; then
            echo "📦 Dependency changes detected:"
            git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.sha }} | grep -E "(go\.mod|go\.sum)"

            echo "⚠️ **Dependency Changes Detected**" >> $GITHUB_STEP_SUMMARY
            echo "Please ensure all dependency changes are intentional and secure." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Changed files:" >> $GITHUB_STEP_SUMMARY
            git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.sha }} | grep -E "(go\.mod|go\.sum)" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No dependency changes detected"
            echo "✅ **No Dependency Changes**" >> $GITHUB_STEP_SUMMARY
            echo "No go.mod or go.sum files were modified in this PR." >> $GITHUB_STEP_SUMMARY
          fi

  security-status:
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-check]
    if: always()

    steps:
      - name: Final security status
        run: |
          echo "## 🛡️ Security Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          scan_status="${{ needs.security-scan.result }}"
          dependency_status="${{ needs.dependency-check.result }}"

          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | $scan_status |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Check | $dependency_status |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "$scan_status" == "success" ]]; then
            echo "✅ **Security checks completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📁 Review detailed security reports in the workflow artifacts." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Security scan encountered issues.**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review the security scan results and address any findings." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
