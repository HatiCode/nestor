name: Release CLI

on:
  push:
    tags:
      - "cli/v*"

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: "1.24.4" # Must match the version in Makefile and go.work

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      commit: ${{ steps.version.outputs.commit }}
      date: ${{ steps.version.outputs.date }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: version
        run: |
          # Extract version from tag
          tag=${GITHUB_REF#refs/tags/cli/}
          echo "version=${tag}" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

          # Extract commit info
          echo "commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

          # Check if this is a prerelease (contains alpha, beta, rc)
          if [[ "$tag" =~ (alpha|beta|rc) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

          echo "📋 Release Information:"
          echo "  Version: $tag"
          echo "  Commit: $(git rev-parse --short HEAD)"
          echo "  Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "  Pre-release: $([[ "$tag" =~ (alpha|beta|rc) ]] && echo "true" || echo "false")"

      - name: Validate tag format
        run: |
          tag="${{ steps.version.outputs.version }}"
          if [[ ! "$tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid tag format: $tag"
            echo "Expected format: vX.Y.Z or vX.Y.Z-prerelease"
            exit 1
          fi
          echo "✅ Tag format is valid: $tag"

  test-and-build:
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: false

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-cli-release-${{ runner.os }}-${{ env.GO_VERSION }}-${{ hashFiles('**/go.mod', '**/go.sum', 'go.work', 'go.work.sum') }}
          restore-keys: |
            go-cli-release-${{ runner.os }}-${{ env.GO_VERSION }}-
            go-cli-release-${{ runner.os }}-

      - name: Setup workspace and dependencies
        run: |
          echo "🔧 Setting up Go workspace..."
          go work sync
          go work verify

          echo "📦 Downloading dependencies..."
          go mod download

          echo "ℹ️ Workspace verification:"
          go version
          echo "Modules in workspace:"
          go list -m all | head -10

      - name: Run comprehensive tests
        run: |
          echo "🧪 Running CLI tests..."
          cd cli

          # Run tests with coverage
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

          # Generate coverage report
          go tool cover -func=coverage.out

          echo "✅ Tests completed successfully"

      - name: Run linting
        run: |
          echo "🔍 Running linters..."

          # Install golangci-lint if not available
          if ! command -v golangci-lint &> /dev/null; then
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
          fi

          # Run linting from root to use workspace config
          golangci-lint run --config tools/lint/.golangci.yml ./cli/...

          echo "✅ Linting completed successfully"

      - name: Run security scans
        run: |
          echo "🔒 Running security scans..."

          # Install and run gosec
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -no-fail -fmt=json -out=gosec-results.json ./cli/... || echo "⚠️ Security scan completed with warnings"

          # Also generate SARIF format for GitHub Security tab
          gosec -no-fail -fmt=sarif -out=gosec-results.sarif ./cli/... || echo "⚠️ SARIF generation completed"

          # Install and run trivy
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy fs --format json --output trivy-results.json ./cli/ || echo "⚠️ Vulnerability scan completed"

          echo "✅ Security scans completed"

      - name: Test cross-compilation
        run: |
          echo "🔨 Testing cross-compilation..."
          cd cli

          # Test building for different platforms
          platforms=("linux/amd64" "linux/arm64" "darwin/amd64" "darwin/arm64" "windows/amd64")

          for platform in "${platforms[@]}"; do
            os=${platform%/*}
            arch=${platform#*/}
            echo "  Building for $os/$arch..."

            GOOS=$os GOARCH=$arch CGO_ENABLED=0 go build \
              -ldflags="-s -w -X main.version=${{ needs.validate-release.outputs.version }} -X main.commit=${{ needs.validate-release.outputs.commit }} -X main.date=${{ needs.validate-release.outputs.date }}" \
              -o /tmp/nestor-$os-$arch .

            if [ $? -eq 0 ]; then
              echo "    ✅ $os/$arch build successful"
            else
              echo "    ❌ $os/$arch build failed"
              exit 1
            fi
          done

          echo "✅ Cross-compilation tests completed"

  release-cli:
    runs-on: ubuntu-latest
    needs: [validate-release, test-and-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-cli-release-${{ runner.os }}-${{ env.GO_VERSION }}-${{ hashFiles('**/go.mod', '**/go.sum', 'go.work', 'go.work.sum') }}

      - name: Setup workspace
        run: |
          go work sync
          go mod download

      - name: Prepare GoReleaser config
        run: |
          echo "📝 Preparing GoReleaser configuration..."
          cd cli

          # Ensure .goreleaser.yml exists (use the one from artifacts or create default)
          if [ ! -f .goreleaser.yml ]; then
            echo "⚠️ .goreleaser.yml not found, creating default configuration..."
            cp ../.goreleaser-cli.yml .goreleaser.yml 2>/dev/null || cat > .goreleaser.yml << 'EOF'
          version: 1

          project_name: nestor-cli

          before:
            hooks:
              - go work sync
              - go mod tidy
              - go test ./...

          builds:
            - id: nestor-cli
              main: .
              binary: nestor
              env:
                - CGO_ENABLED=0
              goos:
                - linux
                - windows
                - darwin
              goarch:
                - "386"
                - amd64
                - arm64
              ignore:
                - goos: windows
                  goarch: arm64
              ldflags:
                - -s -w
                - -X main.version={{ .Env.CLI_VERSION }}
                - -X main.commit={{ .Commit }}
                - -X main.date={{ .Date }}
                - -X main.builtBy=goreleaser

          archives:
            - id: nestor-cli
              name_template: "nestor-cli_{{ .Version }}_{{ .Os }}_{{ .Arch }}"
              format_overrides:
                - goos: windows
                  format: zip
              files:
                - README.md
                - ../LICENSE

          checksum:
            name_template: "checksums.txt"

          changelog:
            sort: asc
            use: github
            filters:
              exclude:
                - "^docs:"
                - "^test:"
                - "^ci:"
                - "Merge pull request"
                - "Merge branch"
            groups:
              - title: Features
                regexp: "^.*feat[(\\w)]*:+.*$"
                order: 0
              - title: "Bug fixes"
                regexp: "^.*fix[(\\w)]*:+.*$"
                order: 1
              - title: Others
                order: 999

          brews:
            - name: nestor-cli
              repository:
                owner: HatiCode
                name: homebrew-tap
              homepage: "https://github.com/HatiCode/nestor"
              description: "Infrastructure as Code from Code annotations"
              license: "Apache-2.0"
              install: |
                bin.install "nestor"
              test: |
                system "#{bin}/nestor --version"

          nfpms:
            - id: nestor-cli
              package_name: nestor-cli
              vendor: Nestor
              homepage: "https://github.com/HatiCode/nestor"
              description: "Infrastructure as Code from Code annotations"
              maintainer: "Nestor Team <team@nestor.dev>"
              license: "Apache-2.0"
              formats:
                - deb
                - rpm
                - apk
          EOF
          fi

      - name: Build and release with GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
          workdir: cli
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLI_VERSION: ${{ needs.validate-release.outputs.version }}

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cli-security-scan-results-${{ github.run_number }}
          path: |
            gosec-results.json
            gosec-results.sarif
            trivy-results.json
          retention-days: 30

      - name: Upload Gosec SARIF to Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('gosec-results.sarif') != ''
        with:
          sarif_file: gosec-results.sarif
          category: gosec-cli-release
        continue-on-error: true

  post-release:
    runs-on: ubuntu-latest
    needs: [validate-release, release-cli]
    if: always() && needs.release-cli.result == 'success'
    steps:
      - name: Update Homebrew formula
        if: needs.validate-release.outputs.is-prerelease == 'false'
        uses: dawidd6/action-homebrew-bump-formula@v3
        with:
          token: ${{ secrets.HOMEBREW_TOKEN || secrets.GITHUB_TOKEN }}
          formula: nestor-cli
          directory: Formula
        continue-on-error: true

      - name: Update package managers
        if: needs.validate-release.outputs.is-prerelease == 'false'
        run: |
          echo "📦 Package managers will be updated automatically via GoReleaser"
          echo "  - Homebrew: nestor-cli formula"
          echo "  - Scoop: nestor-cli manifest (if configured)"
          echo "  - APT/YUM: .deb and .rpm packages"

      - name: Trigger documentation update
        if: needs.validate-release.outputs.is-prerelease == 'false'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: cli-release
          client-payload: |
            {
              "version": "${{ needs.validate-release.outputs.version }}",
              "commit": "${{ needs.validate-release.outputs.commit }}",
              "download_url": "https://github.com/${{ github.repository }}/releases/tag/cli/${{ needs.validate-release.outputs.version }}"
            }

      - name: Create release summary
        run: |
          echo "## 🚀 CLI Release ${{ needs.validate-release.outputs.version }} Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📦 Release Assets" >> $GITHUB_STEP_SUMMARY
          echo "- **Cross-platform binaries**: Linux, macOS, Windows (amd64, arm64)" >> $GITHUB_STEP_SUMMARY
          echo "- **Package formats**: .deb, .rpm, .apk packages" >> $GITHUB_STEP_SUMMARY
          echo "- **Checksums**: SHA256 checksums for all assets" >> $GITHUB_STEP_SUMMARY
          echo "- **Archive formats**: .tar.gz (Unix), .zip (Windows)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📥 Installation Methods" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Homebrew (macOS/Linux)" >> $GITHUB_STEP_SUMMARY
          echo "brew install nestor-cli" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Direct download" >> $GITHUB_STEP_SUMMARY
          echo "wget https://github.com/${{ github.repository }}/releases/download/cli/${{ needs.validate-release.outputs.version }}/nestor-cli_${{ needs.validate-release.outputs.version }}_linux_amd64.tar.gz" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Debian/Ubuntu" >> $GITHUB_STEP_SUMMARY
          echo "wget https://github.com/${{ github.repository }}/releases/download/cli/${{ needs.validate-release.outputs.version }}/nestor-cli_${{ needs.validate-release.outputs.version }}_linux_amd64.deb" >> $GITHUB_STEP_SUMMARY
          echo "sudo dpkg -i nestor-cli_${{ needs.validate-release.outputs.version }}_linux_amd64.deb" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### ℹ️ Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ needs.validate-release.outputs.commit }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Built**: ${{ needs.validate-release.outputs.date }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Go Version**: ${{ env.GO_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ needs.validate-release.outputs.is-prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [📋 Release Notes](https://github.com/${{ github.repository }}/releases/tag/cli/${{ needs.validate-release.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [📚 Documentation](https://github.com/${{ github.repository }}/blob/main/cli/README.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [🐛 Report Issues](https://github.com/${{ github.repository }}/issues)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.validate-release.outputs.is-prerelease }}" == "true" ]]; then
            echo "### ⚠️ Pre-release Notice" >> $GITHUB_STEP_SUMMARY
            echo "This is a pre-release version. Use with caution in production environments." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ Production Ready" >> $GITHUB_STEP_SUMMARY
            echo "This is a stable release ready for production use." >> $GITHUB_STEP_SUMMARY
          fi

  notify:
    runs-on: ubuntu-latest
    needs: [validate-release, release-cli, post-release]
    if: always()
    steps:
      - name: Notify on success
        if: needs.release-cli.result == 'success'
        run: |
          echo "🎉 CLI release ${{ needs.validate-release.outputs.version }} completed successfully!"
          echo "📦 Assets are available at: https://github.com/${{ github.repository }}/releases/tag/cli/${{ needs.validate-release.outputs.version }}"

      - name: Notify on failure
        if: needs.release-cli.result == 'failure'
        run: |
          echo "❌ CLI release ${{ needs.validate-release.outputs.version }} failed!"
          echo "Please check the logs and fix any issues before retrying."
          exit 1

      - name: Send Slack notification
        if: needs.release-cli.result == 'success' && needs.validate-release.outputs.is-prerelease == 'false'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🚀 Nestor CLI ${{ needs.validate-release.outputs.version }} Released!",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {
                      "title": "Version",
                      "value": "${{ needs.validate-release.outputs.version }}",
                      "short": true
                    },
                    {
                      "title": "Download",
                      "value": "<https://github.com/${{ github.repository }}/releases/tag/cli/${{ needs.validate-release.outputs.version }}|GitHub Release>",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true
