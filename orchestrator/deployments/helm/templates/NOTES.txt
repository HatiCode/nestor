1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "nestor-orchestrator.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "nestor-orchestrator.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "nestor-orchestrator.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward svc/{{ include "nestor-orchestrator.fullname" . }} 8080:{{ .Values.service.port }}
{{- end }}

2. Check the deployment status:
  kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "nestor-orchestrator.name" . }},app.kubernetes.io/instance={{ .Release.Name }}"

3. View the logs:
  kubectl logs --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "nestor-orchestrator.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -f

4. Run tests:
  helm test {{ .Release.Name }} --namespace {{ .Release.Namespace }}

{{- if .Values.config.git.repositories }}
5. Configured Git repositories:
{{- range .Values.config.git.repositories }}
  - {{ .name }}: {{ .url }} ({{ .path }})
{{- end }}
{{- end }}

6. API Endpoints:
  - Health: /health
  - Ready: /ready
  - Metrics: /metrics
  - Catalog: /api/v1/catalog
  - Components: /api/v1/components
{{- if .Values.config.sse.enabled }}
  - Server-Sent Events: /api/v1/events
{{- end }}

{{- if not .Values.dependencies.redis.enabled }}

WARNING: Redis is not enabled. The orchestrator requires Redis for caching.
Please ensure you have Redis deployed separately or enable it in values:

dependencies:
  redis:
    enabled: true
{{- end }}

{{- if eq .Values.config.storage.type "dynamodb" }}
{{- if not .Values.config.storage.dynamodb.endpoint }}

NOTE: Using AWS DynamoDB service. Ensure your cluster has proper AWS credentials.
For local development, consider using DynamoDB Local:

dependencies:
  dynamodbLocal:
    enabled: true
{{- end }}
{{- end }}
